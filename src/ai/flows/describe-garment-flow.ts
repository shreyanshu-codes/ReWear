// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview An AI agent that describes a garment based on an image.
 *
 * - describeGarment - A function that handles the garment description process.
 * - DescribeGarmentInput - The input type for the describeGarment function.
 * - DescribeGarmentOutput - The return type for the describeGarment function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const DescribeGarmentInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A photo of a garment, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type DescribeGarmentInput = z.infer<typeof DescribeGarmentInputSchema>;

const DescribeGarmentOutputSchema = z.object({
  description: z.string().describe('A detailed description of the garment.'),
  category: z.string().describe('The category of the garment (e.g., dress, shirt, pants).'),
  suitableOccasions: z.string().describe('A comma separated list of occasions where this garment would be suitable (e.g., casual, formal, party).'),
  dominantColor: z.string().describe('The dominant color of the garment.'),
  material: z.string().describe('The primary material of the garment.'),
  style: z.string().describe('The style of the garment (e.g. vintage, modern, classic).'),
});
export type DescribeGarmentOutput = z.infer<typeof DescribeGarmentOutputSchema>;

export async function describeGarment(input: DescribeGarmentInput): Promise<DescribeGarmentOutput> {
  return describeGarmentFlow(input);
}

const prompt = ai.definePrompt({
  name: 'describeGarmentPrompt',
  input: {schema: DescribeGarmentInputSchema},
  output: {schema: DescribeGarmentOutputSchema},
  prompt: `You are a fashion expert. Describe the garment in the photo.

Analyze the following image and provide a detailed description, category, suitable occasions, dominant color, material, and style of the garment.

Photo: {{media url=photoDataUri}}

Description:
Category:
Suitable Occasions:
Dominant Color:
Material:
Style:`,
});

const describeGarmentFlow = ai.defineFlow(
  {
    name: 'describeGarmentFlow',
    inputSchema: DescribeGarmentInputSchema,
    outputSchema: DescribeGarmentOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
